/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package metodoburbuja;

import javax.swing.JTextField;

/**
 *
 * @author Gilberto
 */
public class Burbuja extends javax.swing.JFrame {

    int[] arreglo = new int[0];
    boolean bandera = true;

    /**
     * Creates new form Bubruja
     */
    public Burbuja() {
        initComponents();
        setLocationRelativeTo(null);
        comboCant.setSelectedIndex(8);
        t1.requestFocus();
        setTitle("Algoritos de ordenamiento");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        comboCant = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        btnBurbuja = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tLog = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        t2 = new javax.swing.JTextField();
        t1 = new javax.swing.JTextField();
        t5 = new javax.swing.JTextField();
        t3 = new javax.swing.JTextField();
        t4 = new javax.swing.JTextField();
        t10 = new javax.swing.JTextField();
        t6 = new javax.swing.JTextField();
        t7 = new javax.swing.JTextField();
        t8 = new javax.swing.JTextField();
        t9 = new javax.swing.JTextField();
        btnQuicksort = new javax.swing.JButton();
        btnMerge = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        comboCant.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        comboCant.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboCantItemStateChanged(evt);
            }
        });

        jLabel1.setText("Cuantos numeros necesita?");

        btnBurbuja.setText("Burbuja");
        btnBurbuja.setActionCommand("");
        btnBurbuja.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnBurbujaMouseClicked(evt);
            }
        });

        tLog.setBackground(new java.awt.Color(0, 0, 0));
        tLog.setColumns(20);
        tLog.setForeground(new java.awt.Color(51, 255, 0));
        tLog.setRows(5);
        tLog.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Log", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12), new java.awt.Color(102, 255, 0))); // NOI18N
        jScrollPane1.setViewportView(tLog);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 333, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(20, 20, 20)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(t1, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                        .addComponent(t6, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                    .addGap(18, 18, 18)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(t2, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                        .addComponent(t7, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                    .addGap(18, 18, 18)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(t3, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                        .addComponent(t8, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                    .addGap(18, 18, 18)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(t4, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                        .addComponent(t9, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                    .addGap(18, 18, 18)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(t10, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                        .addComponent(t5, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                    .addGap(41, 41, 41)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 110, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(1, 1, 1)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(t2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(t1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(t3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(t4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(t5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(t6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(t7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(t8, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(t9, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(t10, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        btnQuicksort.setText("QuickSort");
        btnQuicksort.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnQuicksortMouseClicked(evt);
            }
        });

        btnMerge.setText("MergeSort");
        btnMerge.setActionCommand("");
        btnMerge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMergeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(comboCant, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(140, 161, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(btnQuicksort)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnMerge)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnBurbuja)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboCant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBurbuja)
                    .addComponent(btnQuicksort)
                    .addComponent(btnMerge))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboCantItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboCantItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            int opc = Integer.valueOf(comboCant.getSelectedItem().toString());
            arreglo = new int[opc];
            switch (opc) {
                case 2:
                    t1.setVisible(true);
                    t2.setVisible(true);
                    t3.setVisible(false);
                    t4.setVisible(false);
                    t5.setVisible(false);
                    t6.setVisible(false);
                    t7.setVisible(false);
                    t8.setVisible(false);
                    t9.setVisible(false);
                    t10.setVisible(false);
                    break;
                case 3:
                    t1.setVisible(true);
                    t2.setVisible(true);
                    t3.setVisible(true);
                    t4.setVisible(false);
                    t5.setVisible(false);
                    t6.setVisible(false);
                    t7.setVisible(false);
                    t8.setVisible(false);
                    t9.setVisible(false);
                    t10.setVisible(false);
                    break;
                case 4:
                    t1.setVisible(true);
                    t2.setVisible(true);
                    t3.setVisible(true);
                    t4.setVisible(true);
                    t5.setVisible(false);
                    t6.setVisible(false);
                    t7.setVisible(false);
                    t8.setVisible(false);
                    t9.setVisible(false);
                    t10.setVisible(false);
                    break;
                case 5:
                    t1.setVisible(true);
                    t2.setVisible(true);
                    t3.setVisible(true);
                    t4.setVisible(true);
                    t5.setVisible(true);
                    t6.setVisible(false);
                    t7.setVisible(false);
                    t8.setVisible(false);
                    t9.setVisible(false);
                    t10.setVisible(false);
                    break;
                case 6:
                    t1.setVisible(true);
                    t2.setVisible(true);
                    t3.setVisible(true);
                    t4.setVisible(true);
                    t5.setVisible(true);
                    t6.setVisible(true);
                    t7.setVisible(false);
                    t8.setVisible(false);
                    t9.setVisible(false);
                    t10.setVisible(false);
                    break;
                case 7:
                    t1.setVisible(true);
                    t2.setVisible(true);
                    t3.setVisible(true);
                    t4.setVisible(true);
                    t5.setVisible(true);
                    t6.setVisible(true);
                    t7.setVisible(true);
                    t8.setVisible(false);
                    t9.setVisible(false);
                    t10.setVisible(false);
                    break;
                case 8:
                    t1.setVisible(true);
                    t2.setVisible(true);
                    t3.setVisible(true);
                    t4.setVisible(true);
                    t5.setVisible(true);
                    t6.setVisible(true);
                    t7.setVisible(true);
                    t8.setVisible(true);
                    t9.setVisible(false);
                    t10.setVisible(false);
                    break;
                case 9:
                    t1.setVisible(true);
                    t2.setVisible(true);
                    t3.setVisible(true);
                    t4.setVisible(true);
                    t5.setVisible(true);
                    t6.setVisible(true);
                    t7.setVisible(true);
                    t8.setVisible(true);
                    t9.setVisible(true);
                    t10.setVisible(false);
                    break;
                case 10:
                    t1.setVisible(true);
                    t2.setVisible(true);
                    t3.setVisible(true);
                    t4.setVisible(true);
                    t5.setVisible(true);
                    t6.setVisible(true);
                    t7.setVisible(true);
                    t8.setVisible(true);
                    t9.setVisible(true);
                    t10.setVisible(true);
                    break;

                default:
                    throw new AssertionError();
            }

        }
    }//GEN-LAST:event_comboCantItemStateChanged

    private void btnBurbujaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBurbujaMouseClicked
        fillArray();

        if (!bandera) {
            tLog.setText(tLog.getText() + "Solo acepta numeros");
        } else {
            //metodo burbuja:
            int arregloOrdenado[] = burbuja(arreglo);
            tLog.setText(tLog.getText() + "\r\n" + "Numeros ordenados: ");
            for (int i = 0; i < arregloOrdenado.length; i++) {
                tLog.setText(tLog.getText() + arregloOrdenado[i] + ",");
            }
        }

        tLog.setText(tLog.getText() + "\r\n");


    }//GEN-LAST:event_btnBurbujaMouseClicked

    private void btnQuicksortMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnQuicksortMouseClicked
         fillArray();
        if (!bandera) {
            tLog.setText(tLog.getText() + "Solo acepta numeros");
        } else {
            //metodo QuickSort:
            tLog.setText(tLog.getText() + "Proceso ordenamiento QuickSort:\r\n");
            quicksort(arreglo, 0, arreglo.length - 1);
            tLog.setText(tLog.getText() + "\r\n" + "Numeros ordenados: ");
            for (int i = 0; i < arreglo.length; i++) {
                tLog.setText(tLog.getText() + arreglo[i] + ",");
            }
            tLog.setText(tLog.getText() + "\r\n");
        }

        tLog.setText(tLog.getText() + "\r\n");

    }//GEN-LAST:event_btnQuicksortMouseClicked

    private void btnMergeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMergeActionPerformed
        fillArray();
        if (!bandera) {
            tLog.setText(tLog.getText() + "Solo acepta numeros");
        } else {
            //metodo MergeSort
            tLog.setText(tLog.getText() + "Proceso ordenamiento QuickSort:\r\n");
            mergesort(arreglo, 0, arreglo.length-1);
            tLog.setText(tLog.getText() + "\r\n" + "Numeros ordenados: ");
            for (int i = 0; i < arreglo.length; i++) {
                tLog.setText(tLog.getText() + arreglo[i] + ",");
            }
            tLog.setText(tLog.getText() + "\r\n");
        }

        tLog.setText(tLog.getText() + "\r\n");
    }//GEN-LAST:event_btnMergeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Burbuja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Burbuja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Burbuja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Burbuja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Burbuja().setVisible(true);
            }
        });
    }

    public void fillArray() {
        tLog.setText("");
        bandera = true;
        if (arreglo.length > 0) {
            if (!t1.getText().equals("")) {
                if (isValid(t1)) {
                    arreglo[0] = Integer.valueOf(t1.getText());
                } else {
                    bandera = false;
                }
            }
            if (!t2.getText().equals("")) {

                if (isValid(t2)) {
                    arreglo[1] = Integer.valueOf(t2.getText());
                } else {
                    bandera = false;
                }
            }
            if (!t3.getText().equals("")) {
                if (isValid(t3)) {
                    arreglo[2] = Integer.valueOf(t3.getText());
                } else {
                    bandera = false;
                }
            }
            if (!t4.getText().equals("")) {
                if (isValid(t4)) {
                    arreglo[3] = Integer.valueOf(t4.getText());
                } else {
                    bandera = false;
                }
            }
            if (!t5.getText().equals("")) {
                if (isValid(t5)) {
                    arreglo[4] = Integer.valueOf(t5.getText());
                } else {
                    bandera = false;
                }
            }
            if (!t6.getText().equals("")) {
                if (isValid(t6)) {
                    arreglo[5] = Integer.valueOf(t6.getText());
                } else {
                    bandera = false;
                }
            }
            if (!t7.getText().equals("")) {
                if (isValid(t7)) {
                    arreglo[6] = Integer.valueOf(t7.getText());
                } else {
                    bandera = false;
                }
            }
            if (!t8.getText().equals("")) {
                if (isValid(t8)) {
                    arreglo[7] = Integer.valueOf(t8.getText());
                } else {
                    bandera = false;
                }
            }
            if (!t9.getText().equals("")) {
                if (isValid(t9)) {
                    arreglo[8] = Integer.valueOf(t9.getText());
                } else {
                    bandera = false;
                }
            }
            if (!t10.getText().equals("")) {
                if (isValid(t10)) {
                    arreglo[9] = Integer.valueOf(t10.getText());
                } else {
                    bandera = false;
                }
            }

        }
    }

    public boolean isValid(JTextField component) {
        try {
            Integer.parseInt(component.getText());
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    public void printArreglo(int[] arreglo) {
        for (int i = 0; i < arreglo.length; i++) {
            tLog.setText(tLog.getText() + arreglo[i] + ",");
        }
        tLog.setText(tLog.getText() + "\r\n");
    }

    public int[] burbuja(int[] arreglo) {
        tLog.setText(tLog.getText() + "Proceso ordenamiento Burbuja:\r\n");
        int[] arregloOrdenado;
        for (int i = 0; i < arreglo.length - 1; i++) {
            for (int j = 0; j < arreglo.length - 1; j++) {
                if (arreglo[j] > arreglo[j + 1]) {
                    int tmp = arreglo[j + 1];
                    arreglo[j + 1] = arreglo[j];
                    arreglo[j] = tmp;
                    printArreglo(arreglo);
                }
            }
        }
        arregloOrdenado = arreglo;
        return arregloOrdenado;
    }

    public void quicksort(int A[], int izq, int der) {

        int pivote = A[izq]; // tomamos primer elemento como pivote
        int i = izq; // i realiza la búsqueda de izquierda a derecha
        int j = der; // j realiza la búsqueda de derecha a izquierda
        int aux;

        while (i < j) {            // mientras no se crucen las búsquedas
            while (A[i] <= pivote && i < j) {
                i++; // busca elemento mayor que pivote
            }
            while (A[j] > pivote) {
                j--;         // busca elemento menor que pivote
            }
            if (i < j) {                      // si no se han cruzado                      
                aux = A[i];                  // los intercambia
                A[i] = A[j];
                A[j] = aux;
            }
        }
        printArreglo(A);
        A[izq] = A[j]; // se coloca el pivote en su lugar de forma que tendremos
        A[j] = pivote; // los menores a su izquierda y los mayores a su derecha
        if (izq < j - 1) {
            quicksort(A, izq, j - 1); // ordenamos subarray izquierdo
        }
        if (j + 1 < der) {
            quicksort(A, j + 1, der); // ordenamos subarray derecho
        }
    }

    public static void mergesort(int A[], int izq, int der) {
        if (izq < der) {
            int m = (izq + der) / 2;
            mergesort(A, izq, m);
            mergesort(A, m + 1, der);
            merge(A, izq, m, der);
        }
    }

    public static void merge(int A[], int izq, int m, int der) {
        int i, j, k;
        int[] B = new int[A.length]; //array auxiliar
        for (i = izq; i <= der; i++) //copia ambas mitades en el array auxiliar
        {
            B[i] = A[i];
        }

        i = izq;
        j = m + 1;
        k = izq;
        while (i <= m && j <= der) //copia el siguiente elemento más grande
        {
            if (B[i] <= B[j]) {
                A[k++] = B[i++];
            } else {
                A[k++] = B[j++];
            }
        }
        while (i <= m) //copia los elementos que quedan de la
        {
            A[k++] = B[i++]; //primera mitad (si los hay)
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBurbuja;
    private javax.swing.JButton btnMerge;
    private javax.swing.JButton btnQuicksort;
    private javax.swing.JComboBox<String> comboCant;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField t1;
    private javax.swing.JTextField t10;
    private javax.swing.JTextField t2;
    private javax.swing.JTextField t3;
    private javax.swing.JTextField t4;
    private javax.swing.JTextField t5;
    private javax.swing.JTextField t6;
    private javax.swing.JTextField t7;
    private javax.swing.JTextField t8;
    private javax.swing.JTextField t9;
    private javax.swing.JTextArea tLog;
    // End of variables declaration//GEN-END:variables
}
